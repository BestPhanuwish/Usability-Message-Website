<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <form id="login-form">
        <p>Username</p>
        <input id="username"/>
        <p>Password</p>
        <input id="password"  type="password"/>
        <button type="submit">Login</button>
    </form>

    <script>

        // form is safer than just onclick function
        document.getElementById("login-form").addEventListener("submit", function(event) {
            event.preventDefault(); // Prevent the default form submission behavior
    
            // call function
            login();
        });

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // Function to check if the input contains XSS character
        // see: https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-536840
        function containsSpecialCharacters(text) {
            var regex = /[?&/<>]/;
            return regex.test(text);
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            // Serialize the input to prevent XSS attacks
            // (we not takes input with special character)
            if (containsSpecialCharacters($("#username").val()) || containsSpecialCharacters($("#password").val())) {
                alert("username or password can't contain following character: ?&/<>");
                return;
            }

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: $("#password").val()
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // generate important keys and save within localstorage
            generateECDHKeyPair();

            // set username to localstorage
            window.localStorage.setItem("username", $("#username").val());

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }

        // we generate key pair for user when they able to login
        async function generateECDHKeyPair() {
            let keyPair = await window.crypto.subtle.generateKey(
                {
                    name: "ECDH",
                    namedCurve: "P-384",
                },
                true,
                ["deriveBits"]
            );
    
            // save data to local storage
            // Export the public key to JWK format
            console.log(keyPair.publicKey);
            const jwkPublicKey = await window.crypto.subtle.exportKey("jwk", keyPair.publicKey);
          
            // Store the JWK representation of the public key in local storage
            window.localStorage.setItem("publicKey", JSON.stringify(jwkPublicKey));
          
            // Export the private key to JWK format
            console.log(keyPair.privateKey);
            const jwkPrivateKey = await window.crypto.subtle.exportKey("jwk", keyPair.privateKey);
          
            // Store the JWK representation of the private key in local storage
            window.localStorage.setItem("privateKey", JSON.stringify(jwkPrivateKey));
        }

    </script>
{% endblock %}

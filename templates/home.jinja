<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 

<!-- Include navigation -->
{% include 'nav.jinja' %}

<style>
    body, html {
        background-color: var(--darker-grey);
        color: var(--light-white);
    }

    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    main {
        display: flex;
        height: 80%;
        width: 100%;
    }
    
    main > div {
        flex: 1;
        padding: 10px;
        box-sizing: border-box;
        text-align: center;
    }

    #message_box {
        border: 2px solid var(--light-white);
        background-color: var(--lighter-grey);
        height: 80%; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
        text-align: left;
    }

    #input_box {
        text-align: left;
    }

    #input_box input {
        width: 600px;
        padding: 0;
    }

    #input_box form {
        display: flex;
    }

    #friend_list, #request_list, #notification_list {
        flex: 1;
        padding: 0px 10px 10px 10px; /* Removed top padding */
    }

    #friend_list ul li, #request_list ul li {
        padding: 5px
    }

    .friend-container {
        display: flex;
        width: 100%;
    }
    
    .join-room-btn {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 80%;
        text-align: left;
        border: 1px solid #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }
    
    .friend-info {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }
    
    .friend-status {
        margin-top: 10px;
    }
    
    .remove-friend-btn {
        width: 20%;
        text-align: center;
        background-color: red;
        color: white;
        border: 1px solid #ccc;
        padding: 10px;
    }

    #request_list {
        text-align: left;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    ul.no-bullets {
        list-style-type: none; /* Remove bullets */
        padding: 0; /* Remove padding */
        margin: 0; /* Remove margins */
    }
    

</style>

<main>

    <!-- Friend part -->
    <div id="friend_part">
        <section id="friend_list">
            <h2>Your Friends</h2>
            <ul class="no-bullets">
            </ul>
        </section>
    </div>

    <!-- Messages box part -->
    <div id="message_part">
        <h1>Messaging App</h1>

        <!-- The messages are displayed here -->
        <section id="message_box"></section>

        <!-- These part ideally should be a form element, 
        but I wrote this code a year ago and I don't want to break anything...-->
        <!-- I'll make this invisible now as we don't need it -->
        <section id="chat_box" style="display: none">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="join_room(this)">Chat</button>
        </section>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <form id="message-form">
                <input id="message" placeholder="message">
                <button type="submit">Send</button>
            </form>
            <button onclick="leave()">Leave Room</button>
        </section>
    </div>

    <!-- Friend request part -->
    <div>
        <section id="request_list">
            <h2>Friend Requests</h2>

            <!-- Input to add new friend -->
            <p class="text">Add friend: </p>
            <form id="friend-form">
                <input id="added_friend" placeholder="friend's username">
                <button type="submit">Add</button>
            </form>

            <h3>Request Pending</h3>
            <ul class="no-bullets">
            </ul>

        </section>
        <section id="notification_list">
            <h2>Notification</h2>
            <ul class="no-bullets">
            </ul>
        </section>
    </div>

    <!-- Hidden template -->
    <li id="notification-box" style="display: none;">
        <p>Friend sent you a friend request</p>
        <button onclick="accept_request(this)">Accept</button>
        <button onclick="decline_request(this)">Decline</button>
    </li>
    <li id="friend-button" style="display: none;">
        <div class="friend-container">
            <button class="join-room-btn" onclick="join_room(this)">
                <div class="friend-info">
                    <span class="friend-name">Friend</span>
                    <span class="friend-role">Role: Unknown</span>
                </div>
                <div class="friend-status">
                    <p>Status: Offline</p>
                </div>
            </button>
            <button class="remove-friend-btn" onclick="remove_friend(this)">X</button>
        </div>
    </li>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    $(document).ready(() => {
        reload_friend_section();

        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Function to get role name from number
    // Role explain:
    // 0: Student
    // 1: Academics Staff
    // 2: Administrative Staff
    // 3: Admin Staff
    function getRoleName() {
        let number = parseInt(sessionStorage.getItem("role"));
        switch(number) {
            case 0:
                return "student";
            case 1:
                return "staff";
            case 2:
                return "administrator";
            case 3:
                return "admin";
            default:
                return "Unknown";
        }
    }
    function getRoleDisplay(rol) {
        let number = parseInt(rol)
        switch(number) {
            case 0:
                return "student";
            case 1:
                return "staff";
            case 2:
                return "administrator";
            case 3:
                return "admin";
            default:
                return "Unknown";
        }
    }

    // Function to check if the input contains XSS character
    // see: https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-536840
    function containsSpecialCharacters(text) {
        var regex = /[?&/<>]/;
        return regex.test(text);
    }

    // form is safer than just onclick function
    document.getElementById("friend-form").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // call function
        send_request();
    });

    document.getElementById("message-form").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // call function
        send();
    });
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="white") => {
        add_message(msg, color);
    })

    // an incoming from other user message
    socket.on("incoming_message", (msg, color="white") => {
        add_message(msg, color);
    })

    // if someone online/offline in the server, then change their status
    socket.on("online_detect", (name) => {
        let ulElement = document.querySelector('#friend_list .no-bullets');
    
        // Loop through each child element of the <ul> element
        for (let child of ulElement.children) {
            let friend_name = child.getAttribute("data");
            if (friend_name == name) {
                child.querySelector(".friend-status").innerHTML = "Status: Online";
            }
        };
    })
    socket.on("offline_detect", (name) => {
        let ulElement = document.querySelector('#friend_list .no-bullets');
    
        // Loop through each child element of the <ul> element
        for (let child of ulElement.children) {
            let friend_name = child.getAttribute("data");
            if (friend_name == name) {
                child.querySelector(".friend-status").innerHTML = "Status: Offline";
            }
        };
    })

    // if got ask from server whether we're online, then reply
    socket.on("ask_online", (name) => {
        if (username == name) {
            socket.emit("is_online", name);
        }
    })

    // listen to an event to refresh friend section when
    // send friend request, accept and decline friend request
    socket.on("reload", (sender_name, receiver_name) => {
        if (username == sender_name || username == receiver_name) {
            reload_friend_section();
        }
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {

        let message = $("#message").val();
        $("#message").val("");
        message = username + ": " + message;

        // Serialize the input to prevent XSS attacks
        // (we not takes input with special character)
        if (containsSpecialCharacters(message) || containsSpecialCharacters(message)) {
            alert("message can't contain following character: ?&/<>");
            return;
        }

        let receiver = $("#receiver").val();
        socket.emit("send", username, message, room_id, receiver);
    }
    
    // we emit a send friend request event to the server
    function send_request() {
        let friend_username = $("#added_friend").val();

        // Serialize the input to prevent XSS attacks
        // (we not takes input with special character)
        if (containsSpecialCharacters(friend_username) || containsSpecialCharacters(friend_username)) {
            alert("username can't contain following character: ?&/<>");
            return;
        }

        $("#added_friend").val("");

        // pass in the friend username to the server
        socket.emit("send_request", username, friend_username, (res) => {
            // announce error if friend not exist or friend is already added
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, friend_username);  
        });
    }

    // we emit an accept friend request event to the server
    function accept_request(button) {
        // Get the name of the person who sent the request
        let personName = button.parentElement.getAttribute("data");

        // pass in the username and requestor username to the server
        socket.emit("accept_request", username, personName, (res) => {
            // announce error if there is something wrong
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, personName);  

        });
    }

    // we emit an decline friend request event to the server
    function decline_request(button) {
        // Get the name of the person who sent the request
        let personName = button.parentElement.getAttribute("data");

        // pass in the username and requestor username to the server
        socket.emit("decline_request", username, personName, (res) => {
            // announce error if there is something wrong
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, personName);  

        });
    }

    // we emit a remove friend event to the server
    function remove_friend(button) {

        // let receiver = $("#receiver").val();
        let receiver = button.parentElement.parentElement.getAttribute("data");
        let friendInput = document.getElementById("receiver");

        // if the user we talk to is one we delete then we leave room
        if (friendInput.value == receiver) {
            leave()
            friendInput.value = receiver;
            clear_message();
            return;
        }

        // pass in the friend username to the server
        socket.emit("remove_friend", username, receiver, (res) => {
            // announce error if friend not exist
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, receiver);  
        });
    }

    function clear_message() {
        // Get the reference to the message_box element
        let messageBox = document.getElementById("message_box");

        // Clear all child nodes by setting innerHTML to an empty string
        messageBox.innerHTML = "";
    }

    // we emit a join room event to the server to join a room
    function join_room(button) {

        // let receiver = $("#receiver").val();
        let receiver = button.parentElement.parentElement.getAttribute("data");

        // set value of hidden old receiver input field
        // so that we can access that as a global variable
        // and it change every time user click on different friend
        let friendInput = document.getElementById("receiver");
        if (friendInput.value == receiver) {
            return; // we don't want the user to join on the same room
        }

        // when we join the other room, we leave the current room
        if (Cookies.get("room_id") != null) {
            leave();
        }

        friendInput.value = receiver;
        clear_message();

        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                friendInput.value = null;
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        let friendInput = document.getElementById("receiver");
        friendInput.value = null;
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        // $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // used to clear all the list in friend and friend request
    // and load them with the information from server
    function reload_friend_section() {
        // Get the <ul> element by its ID or any other suitable selector
        const friendUlElement = document.getElementById("friend_list").querySelector("ul");
        const requestUlElement = document.getElementById("request_list").querySelector("ul");
        const notificationUlElement = document.getElementById("notification_list").querySelector("ul");
        
        // Clear all list items inside the <ul> element
        friendUlElement.innerHTML = "";
        requestUlElement.innerHTML = "";
        notificationUlElement.innerHTML = "";

        // getting information from the server
        socket.emit("get_friend_info", username, (res) => {
            // announce error if something is wrong
            if (typeof res == "string") {
                alert(res);
                window.open("404", "_self");
                return;
            }

            // putting friend element to respective blocks
            res.friends.forEach(function (item, index) {
                let child = document.getElementById("friend-button").cloneNode(true);
                child.removeAttribute('style');
                child.setAttribute("data", item);
                child.querySelector(".friend-name").innerHTML=item;

                // set role
                socket.emit("get_role", item, (res) => {
                    let roleName = getRoleDisplay(res);
                    let roleNode = child.querySelector('.friend-role');
                    roleNode.innerHTML = "Role: " + roleName;
                });

                // set status
                socket.emit("check_online", item)

                friendUlElement.append(child);
            });
            res.friend_sent.forEach(function (item, index) {
                let child = document.createElement("li");
                child.innerHTML= "- " + item;
                requestUlElement.append(child);
            });
            res.friend_request.forEach(function (item, index) {
                let child = document.getElementById("notification-box").cloneNode(true);
                child.removeAttribute('style');
                child.setAttribute("data", item)
                child.querySelector("p").innerHTML=item+" sent you a friend request"
                notificationUlElement.append(child);
            });
        });
    }
    
</script>
{% endblock %}

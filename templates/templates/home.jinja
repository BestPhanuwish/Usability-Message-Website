<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    main {
        display: flex;
        height: 100%;
    }

    #message_part, #friend_part {
        flex: 1;
    }

    #friend_part {
        display: flex;
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    #friend_list, #request_list, #notification_list {
        flex: 1;
        padding: 0px 10px 10px 10px; /* Removed top padding */
    }

    #friend_list ul li, #request_list ul li {
        padding: 5px
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    ul.no-bullets {
        list-style-type: none; /* Remove bullets */
        padding: 0; /* Remove padding */
        margin: 0; /* Remove margins */
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

 <nav class="navbar navbar-expand-md navbar-light bg-light">
        <a class="navbar-brand" href="{{ url_for('web_index') }}">My Website</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" href="{{ url_for('new') }}">Create Passages</a>
                </li>

                <li class="nav-item active">
                    <a class="nav-link" href="{{ url_for('home') }}">chatRooms</a>
                </li>

                <li class="nav-item active">
                    <a class="nav-link" href="{{ url_for('about') }}">About User</a>
                </li>

                <li class="nav-item active">
                    <a class="nav-link" href="{{ url_for('try_comment') }}">评论区</a>
                </li>
            </ul>
        </div>
    </nav>

<h1>Messaging App </h1>

<main>

    <!-- Messages box part -->
    <div id="message_part">
        <!-- The messages are displayed here -->
        <section id="message_box"></section>

        <!-- These part ideally should be a form element, 
        but I wrote this code a year ago and I don't want to break anything...-->
        <!-- I'll make this invisible now as we don't need it -->
        <section id="chat_box" style="display: none">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="join_room(this)">Chat</button>
        </section>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <form id="message-form">
                <input id="message" placeholder="message">
                <button type="submit">Send</button>
            </form>
            <button onclick="leave()">Leave Room</button>
        </section>
    </div>

    <!-- Friend and friend request part -->
    <div id="friend_part">
        <section id="friend_list">
            <h2>Your Friends</h2>
            <ul class="no-bullets">
            </ul>
        </section>
        <section id="request_list">
            <h2>Friend Requests</h2>

            <!-- Input to add new friend -->
            <p class="text">Add friend: </p>
            <form id="friend-form">
                <input id="added_friend" placeholder="friend's username">
                <button type="submit">Add</button>
            </form>

            <h3>Request Pending</h3>
            <ul class="no-bullets">
            </ul>

        </section>
        <section id="notification_list">
            <h2>Notification</h2>
            <ul class="no-bullets">
            </ul>
        </section>
    </div>

    <!-- Hidden template -->
    <li id="notification-box" style="display: none;">
        <p>Friend sent you a friend request</p>
        <button onclick="accept_request(this)">Accept</button>
        <button onclick="decline_request(this)">Decline</button>
    </li>
    <li id="friend-button" style="display: none;"><button onclick="join_room(this)">Friend</button></li>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let shared_secret;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    // $("#receiver").on("keyup", (e) => {
    //    if (e.key == "Enter") {
    //        join_room();
    //    }
    //})


    $(document).ready(() => {
        // call every time the page restart or enter the page
        console.log(window.localStorage.getItem("username"));
        console.log(username);
        if (window.localStorage.getItem("username") != username) {
            alert("NOT YOUR USERNAME");
            window.open("404", "_self");
        }


        reload_friend_section();

        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Function to check if the input contains XSS character
    // see: https://security.snyk.io/vuln/SNYK-JS-SERIALIZEJAVASCRIPT-536840
    function containsSpecialCharacters(text) {
        var regex = /[?&/<>]/;
        return regex.test(text);
    }

    // form is safer than just onclick function
    document.getElementById("friend-form").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // call function
        send_request();
    });

    document.getElementById("message-form").addEventListener("submit", function(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        // call function
        send();
    });
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })

    // an incoming from other user message
    socket.on("incoming_message", (msg, color="black") => {
        // add_message(msg, color);
        console.log(msg)
        decrypt(shared_secret, msg)
            .then(function(message) {
                add_message(message, color);
            })
    })

    // listen to an event to refresh friend section when
    // send friend request, accept and decline friend request
    socket.on("reload", (sender_name, receiver_name) => {
        if (username == sender_name || username == receiver_name) {
            reload_friend_section();
        }
    })

    // since getting key from local storage involve transfer back to Crypto object
    async function getPublicKeyFromLocalStorage() {
        let publicKey = JSON.parse(window.localStorage.getItem("publicKey"));
        
        // Import the public key object back into CryptoKey objects
        return await window.crypto.subtle.importKey(
            "jwk", // JSON Web Key format
            publicKey,
            {
                name: "ECDH",
                namedCurve: "P-384",
            },
            true, // Whether the key is extractable
            [] // Key usages
        );
        // idk why i have to leave key usage empty when it's public key
        // source: https://stackoverflow.com/questions/63179141/the-jwk-key-ops-member-was-inconsistent-with-that-specified-by-the-web-crypto
    }

    async function getPrivateKeyFromLocalStorage() {
        let privateKey = JSON.parse(window.localStorage.getItem("privateKey"));
        
        // Import the private key object back into CryptoKey objects
        return await window.crypto.subtle.importKey(
            "jwk", // JSON Web Key format
            privateKey,
            {
                name: "ECDH",
                namedCurve: "P-384",
            },
            true, // Whether the key is extractable
            ["deriveBits"] // Key usages
        );
    }

    // derive shared secret from own private and other public key
    // using ECDH mechanism to generate unpredictable key
    async function deriveSharedSecret(privateKey, publicKey) {
        const secret = await window.crypto.subtle.deriveBits(
          { name: "ECDH", public: publicKey },
          privateKey,
          384
        );
    
        return window.crypto.subtle.importKey(
          "raw",
          secret,
          { name: "HKDF" },
          false,
          ["deriveKey"]
        );
    }

    function generateSharedSecret(sender_public_key) {
        getPrivateKeyFromLocalStorage()
            .then(function(privateKey) {
                window.crypto.subtle.importKey(
                    "jwk", // JSON Web Key format
                    sender_public_key,
                    {
                        name: "ECDH",
                        namedCurve: "P-384",
                    },
                    true, // Whether the key is extractable
                    [] // Key usages
                ).then(function(publicKey) {
                    deriveSharedSecret(
                        privateKey,
                        publicKey
                    ).then(function(sharedSecret) {
                        console.log("generate shared secret");
                        console.log(sharedSecret);
                        shared_secret = sharedSecret;
                        window.localStorage.setItem("sharedSecret", JSON.stringify(sharedSecret));
                    })
                })
            })
    }

    // listen to an event to receive the public key
    socket.on("send_public_key", (sender_public_key) => {
        // calculate the shared secret and set it in local storage
        console.log("send_public_key called")
        generateSharedSecret(sender_public_key);

        // send back the public key to the other user
        let publicKey = JSON.parse(window.localStorage.getItem("publicKey"));
        socket.emit("give_public_key", publicKey, room_id);
    })

    // listen to an event to receive the public key from other user
    socket.on("sendback_public_key", (sender_public_key) => {
        // calculate the shared secret and set it in local storage
        generateSharedSecret(sender_public_key);
        console.log("receive public key");
    })

    /*
    Fetch the contents of the "message" textbox, and encode it
    in a form we can use for the encrypt operation.
    */
    function getMessageEncoding(plain_message) {
        let enc = new TextEncoder();
        return enc.encode(plain_message);
    }

    /*
    Given some key material and some random salt,
    derive an AES-GCM key using HKDF.
    */
    function getKey(keyMaterial, salt) {
        return window.crypto.subtle.deriveKey(
            {
                name: "HKDF",
                salt: salt,
                info: new Uint8Array("Encryption example"),
                hash: "SHA-256",
            },
            keyMaterial,
            { name: "AES-GCM", length: 256 },
            true,
            ["encrypt", "decrypt"]
        );
    }

    /*
    Encrypt the message using the shared secret key.
    */
    async function encrypt(secret, plain_message) {
        const message = {
            salt: null,
            iv: null,
            ciphertext: null,
        };

        message.salt = window.crypto.getRandomValues(new Uint8Array(16));
        let key = await getKey(secret, message.salt);
        message.iv = window.crypto.getRandomValues(new Uint8Array(12));
        let encoded = getMessageEncoding(plain_message);

        message.ciphertext = await window.crypto.subtle.encrypt(
            {
                name: "AES-GCM",
                iv: message.iv,
            },
            key,
            encoded
        );

        return message;
    }

    /*
    Decrypt the message using the shared secret key.
    */
    async function decrypt(secret, message) {

        console.log(message);

        let key = await getKey(secret, message.salt);

        try {
            let decrypted = await window.crypto.subtle.decrypt(
                {
                name: "AES-GCM",
                iv: message.iv,
                },
                key,
                message.ciphertext
            );

            let dec = new TextDecoder();
            return dec.decode(decrypted);
        } catch (e) {
            alert(e);
        }

    }
    
    // we'll send the message to the server by emitting a "send" event
    function send() {

        let msg = username + ": " + $("#message").val();
        encrypt(shared_secret, msg)
            .then(function(encrypted_message) {
                console.log(encrypted_message);
                decrypt(shared_secret, encrypted_message)
                    .then(function(decrypted_message) {
                        console.log(decrypted_message)
                        console.log("finish self decrypt");
                    })
            })

        // not allow to send message if we don't have shared secret
        if (shared_secret == null) { 
            alert("The other user is not join the room, message not sent");
            return;
        }

        let message = $("#message").val();

        // Serialize the input to prevent XSS attacks
        // (we not takes input with special character)
        if (containsSpecialCharacters(message) || containsSpecialCharacters(message)) {
            alert("message can't contain following character: ?&/<>");
            return;
        }

        // get and encrypt the message
        message = username + ": " + message;
        $("#message").val("");
        encrypt(shared_secret, message)
            .then(function(encrypted_message) {
                console.log(encrypted_message);
                let receiver = $("#receiver").val();
                socket.emit("send", username, message, room_id, receiver, encrypted_message);
            })
    }
    
    // we emit a send friend request event to the server
    function send_request() {
        let friend_username = $("#added_friend").val();

        // Serialize the input to prevent XSS attacks
        // (we not takes input with special character)
        if (containsSpecialCharacters(friend_username) || containsSpecialCharacters(friend_username)) {
            alert("username can't contain following character: ?&/<>");
            return;
        }

        $("#added_friend").val("");

        // pass in the friend username to the server
        socket.emit("send_request", username, friend_username, (res) => {
            // announce error if friend not exist or friend is already added
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, friend_username);  
        });
    }

    // we emit an accept friend request event to the server
    function accept_request(button) {
        // Get the name of the person who sent the request
        let personName = button.parentElement.getAttribute("data");

        // pass in the username and requestor username to the server
        socket.emit("accept_request", username, personName, (res) => {
            // announce error if there is something wrong
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, personName);  

        });
    }

    // we emit an decline friend request event to the server
    function decline_request(button) {
        // Get the name of the person who sent the request
        let personName = button.parentElement.getAttribute("data");

        // pass in the username and requestor username to the server
        socket.emit("decline_request", username, personName, (res) => {
            // announce error if there is something wrong
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // notify user and target user to refresh their friend section
            // to update new state of friend section by updated database
            socket.emit("reload_friend_section", username, personName);  

        });
    }

    function clear_message() {
        // Get the reference to the message_box element
        let messageBox = document.getElementById("message_box");

        // Clear all child nodes by setting innerHTML to an empty string
        messageBox.innerHTML = "";
    }

    // we emit a join room event to the server to join a room
    function join_room(button) {

        // let receiver = $("#receiver").val();
        let receiver = button.parentElement.getAttribute("data");

        // set value of hidden old receiver input field
        // so that we can access that as a global variable
        // and it change every time user click on different friend
        let friendInput = document.getElementById("receiver");
        if (friendInput.value == receiver) {
            return; // we don't want the user to join on the same room
        }

        // when we join the other room, we leave the current room
        if (Cookies.get("room_id") != null) {
            leave();
        }

        friendInput.value = receiver;
        clear_message();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        let publicKey = JSON.parse(window.localStorage.getItem("publicKey"));
        socket.emit("join", username, receiver, publicKey, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        let friendInput = document.getElementById("receiver");
        friendInput.value = null;
        shared_secret = null;
        window.localStorage.removeItem("sharedSecret");
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        // $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // used to clear all the list in friend and friend request
    // and load them with the information from server
    function reload_friend_section() {
        // Get the <ul> element by its ID or any other suitable selector
        const friendUlElement = document.getElementById("friend_list").querySelector("ul");
        const requestUlElement = document.getElementById("request_list").querySelector("ul");
        const notificationUlElement = document.getElementById("notification_list").querySelector("ul");
        
        // Clear all list items inside the <ul> element
        friendUlElement.innerHTML = "";
        requestUlElement.innerHTML = "";
        notificationUlElement.innerHTML = "";

        // getting information from the server
        socket.emit("get_friend_info", username, (res) => {
            // announce error if something is wrong
            if (typeof res == "string") {
                alert(res);
                window.open("404", "_self");
                return;
            }

            // putting friend element to respective blocks
            res.friends.forEach(function (item, index) {
                let child = document.getElementById("friend-button").cloneNode(true);
                child.removeAttribute('style');
                child.setAttribute("data", item)
                child.querySelector("button").innerHTML=item
                friendUlElement.append(child);
            });
            res.friend_sent.forEach(function (item, index) {
                let child = document.createElement("li");
                child.innerHTML=item
                requestUlElement.append(child);
            });
            res.friend_request.forEach(function (item, index) {
                let child = document.getElementById("notification-box").cloneNode(true);
                child.removeAttribute('style');
                child.setAttribute("data", item)
                child.querySelector("p").innerHTML=item+" sent you a friend request"
                notificationUlElement.append(child);
            });
        });
    }
    
</script>


{% endblock %}
